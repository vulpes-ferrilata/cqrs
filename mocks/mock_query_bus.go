// Code generated by MockGen. DO NOT EDIT.
// Source: query_bus.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	context "context"
	reflect "reflect"

	cqrs "github.com/vulpes-ferrilata/cqrs"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryBus is a mock of QueryBus interface.
type MockQueryBus struct {
	ctrl     *gomock.Controller
	recorder *MockQueryBusMockRecorder
}

// MockQueryBusMockRecorder is the mock recorder for MockQueryBus.
type MockQueryBusMockRecorder struct {
	mock *MockQueryBus
}

// NewMockQueryBus creates a new mock instance.
func NewMockQueryBus(ctrl *gomock.Controller) *MockQueryBus {
	mock := &MockQueryBus{ctrl: ctrl}
	mock.recorder = &MockQueryBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryBus) EXPECT() *MockQueryBusMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockQueryBus) Execute(ctx context.Context, query interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, query)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockQueryBusMockRecorder) Execute(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockQueryBus)(nil).Execute), ctx, query)
}

// Register mocks base method.
func (m *MockQueryBus) Register(handler interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockQueryBusMockRecorder) Register(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockQueryBus)(nil).Register), handler)
}

// Use mocks base method.
func (m *MockQueryBus) Use(middlewares ...cqrs.QueryMiddlewareFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range middlewares {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Use", varargs...)
}

// Use indicates an expected call of Use.
func (mr *MockQueryBusMockRecorder) Use(middlewares ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockQueryBus)(nil).Use), middlewares...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: event_bus.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	context "context"
	reflect "reflect"

	cqrs "github.com/vulpes-ferrilata/cqrs"
	gomock "go.uber.org/mock/gomock"
)

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *MockEventBus) Dispatch(ctx context.Context, events []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockEventBusMockRecorder) Dispatch(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockEventBus)(nil).Dispatch), ctx, events)
}

// Register mocks base method.
func (m *MockEventBus) Register(handler interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockEventBusMockRecorder) Register(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockEventBus)(nil).Register), handler)
}

// Use mocks base method.
func (m *MockEventBus) Use(middlewares ...cqrs.EventMiddlewareFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range middlewares {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Use", varargs...)
}

// Use indicates an expected call of Use.
func (mr *MockEventBusMockRecorder) Use(middlewares ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockEventBus)(nil).Use), middlewares...)
}

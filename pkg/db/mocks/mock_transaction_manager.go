// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_manager.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	db "github.com/vulpes-ferrilata/cqrs/pkg/db"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager[DB any] struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder[DB]
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder[DB any] struct {
	mock *MockTransactionManager[DB]
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager[DB any](ctrl *gomock.Controller) *MockTransactionManager[DB] {
	mock := &MockTransactionManager[DB]{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder[DB]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager[DB]) EXPECT() *MockTransactionManagerMockRecorder[DB] {
	return m.recorder
}

// GetTransaction mocks base method.
func (m *MockTransactionManager[DB]) GetTransaction(ctx context.Context) DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx)
	ret0, _ := ret[0].(DB)
	return ret0
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTransactionManagerMockRecorder[DB]) GetTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionManager[DB])(nil).GetTransaction), ctx)
}

// IsTransactionStarted mocks base method.
func (m *MockTransactionManager[DB]) IsTransactionStarted(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTransactionStarted", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTransactionStarted indicates an expected call of IsTransactionStarted.
func (mr *MockTransactionManagerMockRecorder[DB]) IsTransactionStarted(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTransactionStarted", reflect.TypeOf((*MockTransactionManager[DB])(nil).IsTransactionStarted), ctx)
}

// StartTransaction mocks base method.
func (m *MockTransactionManager[DB]) StartTransaction(ctx context.Context) (db.Committer, context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(db.Committer)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTransactionManagerMockRecorder[DB]) StartTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransactionManager[DB])(nil).StartTransaction), ctx)
}
